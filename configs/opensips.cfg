#
# Lineblocs routing scripts
#  
# designed for OpenSIPS Solutions
#


####### Global Parameters #########

/* uncomment the following lines to enable debugging */
debug_mode=yes

log_level=4
xlog_level=4
log_stderror=no
log_facility=LOG_LOCAL0

udp_workers=1

/* uncomment the next line to enable the auto temporary blacklisting of
   not available destinations (default disabled) */
#disable_dns_blacklist=no

/* uncomment the next line to enable IPv6 lookup after IPv4 dns
   lookup failures (default disabled) */
#dns_try_ipv6=yes


auto_aliases=no

# UDP support
#listen=udp:$PUBLIC_IPV4:5060
{{udp_support}}

# TCP support
#listen=tcp:127.0.0.1:5080
{{tcp_support}}

# TLS support
#listen=tcp:127.0.0.1:5080
{{tcp_support}}

listen=hep_udp:$PUBLIC_IPV4:9060

#socket=udp:$PRIVATE_IPV4:5060   # CUSTOMIZE ME
alias=udp:$PUBLIC_IPV4:5060
advertised_address="ADVERTIZED_IPV4"



####### Modules Section ########

#set module path
mpath="/usr/lib/x86_64-linux-gnu/opensips/modules/"

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)


loadmodule "db_mysql.so"

loadmodule "auth.so"
loadmodule "auth_db.so"
# ----- auth_db params -----
modparam("auth_db", "calculate_ha1", yes)
modparam("auth_db", "password_column", "password")
modparam("auth_db", "db_url","mysql://$DB_USER:$DB_PASS@$DB_HOST/$DB_OPENSIPS")
modparam("auth_db", "load_credentials", "")
modparam("auth_db", "use_domain", 1)


loadmodule "domain.so"
# ----- domain params -----
modparam("domain", "db_url", "mysql://$DB_USER:$DB_PASS@$DB_HOST/$DB_OPENSIPS")
modparam("domain", "db_mode", 0)   # Use caching


#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 1)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"


loadmodule "avpops.so"
# default URL
modparam("avpops","db_url","mysql://$DB_USER:$DB_PASS@$DB_HOST/$DB_OPENSIPS")


#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)


#### USeR LOCation module
loadmodule "usrloc.so"
modparam("usrloc", "nat_bflag", "NAT")
modparam("usrloc", "db_mode",   0)
modparam("usrloc", "db_url", "mysql://$DB_USER:$DB_PASS@$DB_HOST/$DB_OPENSIPS")

#### REGISTRAR module
loadmodule "registrar.so"
modparam("registrar", "received_avp", "$avp(received)")

/* uncomment the next line not to allow more than 10 contacts per AOR */
#modparam("registrar", "max_contacts", 10)


loadmodule "nathelper.so"
modparam("nathelper", "ping_nated_only", 1) # Ping only clients behind NAT
modparam("nathelper", "sipping_bflag", "8")
modparam("nathelper", "received_avp", "$avp(received)")
modparam("nathelper", "force_socket", "udp:$PRIVATE_IPV4:7722")

loadmodule "rtpproxy.so"
# RTPProxy setup
#modparam("rtpproxy", "rtpproxy_sock", "udp:$RTPPROXY_IPV4:7722")
modparam("rtpproxy", "db_url", "mysql://$DB_USER:$DB_PASS@$DB_HOST/$DB_OPENSIPS")
modparam("rtpproxy", "db_table", "rtpproxy_sockets")
modparam("rtpproxy", "rtpp_socket_col", "rtpproxy_sock")
modparam("rtpproxy", "rtpproxy_disable_tout", 20)
modparam("rtpproxy", "rtpproxy_autobridge", 1)
modparam("rtpproxy", "rtpproxy_retr", 2)
modparam("rtpproxy", "nortpproxy_str", "a=sdpmangled:yes\r\n")


loadmodule "uac.so"

#### ACCounting module
loadmodule "acc.so"
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_cancels", 0)
/* by default we do not adjust the direct of the sequential requests.
   if you enable this parameter, be sure the enable "append_fromtag"
   in "rr" module */
modparam("acc", "detect_direction", 0)


#### UDP protocol
#loadmodule "proto_udp.so"
{{udp_load_module}}

## TCP protocol
#loadmodule "proto_tcp.so"
#modparam("proto_tcp", "tcp_port", 5065)
{{tcp_load_module}}

## TCP protocol
#loadmodule "proto_tcp.so"
#modparam("proto_tcp", "tcp_port", 5065)
{{tcp_load_module}}




# ----- multi-module params -----
modparam("alias_db|auth_db|usrloc", "use_domain", 1)

loadmodule "rest_client.so"
modparam("rest_client", "connection_timeout", 300)
modparam("rest_client", "connect_poll_interval", 2)
loadmodule "json.so"

loadmodule "options.so"

### CHANGEME mysql uri here if you do sip_capture()
loadmodule "sipcapture.so"
modparam("sipcapture", "db_url", "mysql://$DB_USER:$DB_PASS@$DB_HOST/homer_data")
modparam("sipcapture", "capture_on", 0)
modparam("sipcapture", "hep_capture_on", 0)
modparam("sipcapture", "hep_route", "capture_hep_route")

loadmodule "proto_hep.so"
# use Homer5 formats
modparam("proto_hep", "homer5_on", 1)


####### Routing Logic ########

# main request routing logic
route{

	if ($ua=~"friendly-scanner") 
	{
		 xlog("L_ERROR", "Auth error for $fU@$fd from $si method $rm user-agent (friendly-scanner)\n");
		 drop();
		 exit;
    }

	# start capturing sip packets
	sip_capture();

	if (is_method("OPTIONS")) 
	{
			xlog("got options request..");
			if (is_myself("$rd")) {
				xlog("validated options req. sending response.");
				seturi("sip:$rd");
				options_reply();
			}
			exit;
	}


	if (!mf_process_maxfwd_header(10)) 
	{
		sl_send_reply(483,"Too Many Hops");
		exit;
	}

	if (has_totag()) 
	{
		# sequential request withing a dialog should
        # take the path determined by record-routing
		if (loose_route()) 
		{
			if (is_method("INVITE")) 
			{
                record_route_preset("$PUBLIC_IPV4");
				record_route();
			}

			route(relay);
		} else {
			if (is_method("ACK")) 
			{
				if ( t_check_trans() ) 
				{
					t_relay();
					exit;
				} else {
					# xlog("We are on has_totag, our method is not ACK [ $rm ] ");
					# ACK without matching transaction ->
                    # ignore and discard
					exit;
				}
			}
			
			sl_send_reply(404,"Not here");
		}
		exit;
	}

	# Cancel processing
	if (is_method("CANCEL"))
	{
		if (t_check_trans())
		{
			t_relay();
		}
		exit;
	}

	t_check_trans();

	if ( !(is_method("REGISTER")  ) ) 
	{
		if (is_myself("$fu")) 
		{
				xlog("REG TRY register..");
		} else {
			# if caller is not local, then called number must be local
			if (!is_myself("$rd")) 
			{
				xlog("REG sending back 403. we don't know this domain..");
				send_reply(403,"Rely forbidden");
				exit;
			}
		}
	}

	# preloaded route checking
	if (loose_route()) 
	{
		#xlog("L_ERR", "Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]");
		if (!is_method("ACK")) 
		{
			sl_send_reply(403,"Preload Route denied");
		}

		exit;
	}

	# record routing
	if (!is_method("REGISTER|MESSAGE")) 
	{
		record_route();
	}

	# If we are not the final destination the call is
	# to a external destination
	if (!is_myself("$rd")) 
	{
		#xlog("is_myself failed routing to relay..");
		append_hf("P-hint: outbound\r\n"); 
		route(relay);
	}

	# We dont accept publish or subscribe here
	if (is_method("PUBLISH|SUBSCRIBE"))
	{
		sl_send_reply(503, "Service Unavailable");
		exit;
	}

	if (is_method("REGISTER"))
	{
		$var(query) = "domain=" + $fd + "&ip=" + $si + "&addr=" + $si;
		$var(reg) = "/\+/%2B/g";
		xlog("REG calling API..");
		async(rest_get("$API_URL/user/ipWhitelistLookup?$(var(query){re.subst,$var(reg)})", $var(body), $var(ct), $var(rcode)), register_resume);
		exit;
	}

	if ($rU==NULL) 
	{
		# user needs to set correct addresses to call
		sl_send_reply(484,"Address Incomplete");
		exit;
	}

	xlog("RECEIVED KEY: $hdr(X-LineBlocs-Key)\r\n");
	xlog("RECEIVED AGENT: $hdr(User-Agent)\r\n");
	if ($hdr(X-LineBlocs-Key) == "$LINEBLOCS_KEY") 
	{ #internal asterisk
		remove_hf("X-LineBlocs-Key");
		xlog("received media server request from $si\r\n");
		if (is_method("INVITE")) 
		{
			if ($hdr(X-Lineblocs-User-SIP-Trunk) == "true") 
			{
				route(relay_to_user_trunk);
				exit;
			} else {
				if ($hdr(X-LineBlocs-Route-Type) == "extension")
				{
					xlog("routing to extension...\r\n");
					async(rest_get("$API_URL/user/incomingMediaServerValidation?source=$si&addr=$si", $var(body), $var(ct), $var(rcode)), incoming_ms_validate_1_route);
					#route(relay);
					exit;
				}

				if ($hdr(X-LineBlocs-Route-Type) == "pstn")
				{
					#xlog("L_NOTICE", "calling URL: $API_URL/user/getPSTNProviderIP?from=$fU&to=$tU&domain=$hdr(X-LineBlocs-Domain)");

					xlog("routing to pstn...\r\n");
					async(rest_get("$API_URL/user/incomingMediaServerValidation?source=$si&addr=$si", $var(body), $var(ct), $var(rcode)), incoming_ms_validate_2_route);
					exit;
				}
			}

		}
		exit;
	}

	xlog("User agent is: $hdr(User-Agent)\r\n");
	# scenario to handle calls from either subscribers or from SIPml5 agents
	if (is_registered("location","$fu") || $hdr(User-Agent) == "IM-client/OMA1.0 sipML5-v1.2016.03.04") 
	{
		xlog("Using registered routing..\r\n");
		if (is_method("INVITE")) 
		{
			if($rU =~ "[0-9]{1,}") 
			{
					if ($rU=~"^[0-9]{9,}") 
					{ ## call to PSTN
						$var(query) = "number=" + $tU + "&domain=" + $fd + "&addr=" + $si;
						$var(reg) = "/\+/%2B/g";
						async(rest_get("$API_URL/user/verifyCallerByDomain?$(var(query){re.subst,$var(reg)})", $var(body), $var(ct), $var(rcode)), verify_caller_route);
						exit;
					} else if ($rU=~"^[0-9]{1,5}$") { ## call to another end device
						$var(query) = "username=" + $fu + "&domain=" + $fd + "&routerip=" +  $socket_in(ip) + "&addr=" + $si;
						$var(reg) = "/\+/%2B/g";
						async(rest_get("$API_URL/user/getUserAssignedIP?$(var(query){re.subst,$var(reg)})", $var(body), $var(ct), $var(rcode)), endpoint_query_route);
						exit;	
					}
				} else if ($rU=~"^\*[1-9]+") { ## media service call
					$var(query) = "username=" + $fu + "&domain=" + $fd + "&routerip=" +  $socket_in(ip) + "&addr=" + $si;
					$var(reg) = "/\+/%2B/g";
					async(rest_get("$API_URL/user/getUserAssignedIP?$(var(query){re.subst,$var(reg)})", $var(body), $var(ct), $var(rcode)), mediaservice_query_route);
					exit;
				}
		}
	}

	# handle internal subscriber workflow or calls received from DID numbers
	if (is_method("INVITE")) 
	{
		xlog("SOURCE IP IS: $si");
		if ($hdr(X-LineBlocs-RingSubscriber) == "true")
		{
			xlog("sending to extension...\r\n");
			route(relay);
			exit;
		} else {
			$var(query) = "did=" + $tU + "&number=" + $fU + "&source=" + $si + "&routerip=" +  $socket_in(ip) + "&addr=" + $si;
			$var(reg) = "/\+/%2B/g";

			rest_append_hf("X-Lineblocs-Carrier-Auth: CARRIER_KEY");
			async(rest_get("$API_URL/user/incomingDIDValidation?$(var(query){re.subst,$var(reg)})", $var(body), $var(ct), $var(rcode)), incoming_validation_resume);
			exit;
		}
	}
	route(relay);
}


route[relay] {

	# check if this request is a invite
	
	if (is_method("INVITE")) 
	{
		# for each branch we will call the function below
		
		t_on_branch("per_branch_ops");

		# for each reply we will call the function below
		
		t_on_reply("handle_nat");

		# if the call was not completed, so failure route
		t_on_failure("missed_call");


		if(nat_uac_test(127))
		{
			# user identified as behing a nat
			#xlog("we are on route relay, user behind nat");
			fix_nated_contact();
		}

		# if we have an application/sdp on our body, so we execute
                # the rtpproxy_offer
		if(has_body("application/sdp"))
		{
			#xlog("we have sdp on this $rm");
			# check if the RTP proxy was already selected or not
			if ($hdr(X-LineBlocs-RTPProxy) != "") 
			{
				rtpproxy_offer("froc", "$hdr(X-LineBlocs-RTPProxy)");
			} else {
				rtpproxy_offer("froc", "$PUBLIC_IPV4");
			}
		}
	
		if (lookup("location","m")) 
		{
			#xlog("request uri is now $ru");
		}
	}

	# removing the rtpproxy session
	if(is_method("CANCEL|BYE"))
	{
		#xlog("L_NOTICE", "route sending BYE to other end..  info from: $fu, to: $tu");
		rtpproxy_unforce();
	}

    if (!t_relay()) 
	{
      send_reply(500,"Internal Error");
    };

	exit;
}

route[relay_ms_to_pstn] {

	# check if this request is a invite
	append_hf("X-LineBlocs-Parent-Call-ID: $hdr(Call-ID)\r\n");
	if (is_method("INVITE")) 
	{
		# for each branch we will call the function below
		
		t_on_branch("per_branch_ops");

		# for each reply we will call the function below
		
		t_on_reply("pstn_handle_nat");

		# if the call was not completed, so failure route
		t_on_failure("pstn_failure");


		if(nat_uac_test(127))
		{
			# user identified as behing a nat
			#xlog("we are on route relay, user behind nat");
			fix_nated_contact();
		}

		# if we have an application/sdp on our body, so we execute
        # the rtpproxy_offer
		if(has_body("application/sdp"))
		{
			#xlog("we have sdp on this $rm");
			rtpproxy_offer("froc", "$PUBLIC_IPV4");
		}
	
		if (lookup("location","m")) 
		{
			#xlog("request uri is now $ru");
		}
	}

	# removing the rtpproxy session
	if(is_method("CANCEL|BYE"))
	{
		#xlog("L_NOTICE", "route sending BYE to other end..  info from: $fu, to: $tu");
		rtpproxy_unforce();
	}

    if (!t_relay()) 
	{
      send_reply(500,"Internal Error");
    };

	exit;
}

route[bye_query_route] {
    $ru = "sip:" + $rU + "@" + $avp(value);
	# removing the rtpproxy session

	if(is_method("CANCEL|BYE"))
	{
		rtpproxy_unforce();
	}

    if (!t_relay()) 
	{
      send_reply(500,"Internal Error");
    };

	exit;
}

route[incoming_validation_resume] {
	if ($var(rcode) != 200) 
	{
		# lookup user SIP trunks next
		xlog("SOURCE IP IS: $si");
		$var(query) = "did=" + $tU + "&number=" + $fU + "&source=" + $si + "&routerip=" +  $socket_in(ip) + "&addr=" + $si + "&fromdomain=" + $fd;
		$var(reg) = "/\+/%2B/g";

		rest_append_hf("X-Lineblocs-Carrier-Auth: CARRIER_KEY");
		async(rest_get("$API_URL/user/incomingTrunkValidation?$(var(query){re.subst,$var(reg)})", $var(body), $var(ct), $var(rcode)), trunk_validation_resume);
		exit;

		send_reply(500, "PSTN Routing Failed #1");
		exit;
	}

	switch($var(body))
    {
        case "user_sip_trunk":
			append_hf("X-LineBlocs-Fulfill-Type: user_sip_trunk\r\n");
			rest_append_hf("X-Lineblocs-Carrier-Auth: CARRIER_KEY");
			$var(query) = "did=" + $tU + "&from=" + $fU + "&source=" + $si + "&addr=" + $si;
			$var(reg) = "/\+/%2B/g";
			async(rest_get("$API_URL/user/processSIPTrunkCall?$(var(query){re.subst,$var(reg)})", $var(body), $var(ct), $var(rcode)), user_sip_trunk_resume);
        break;
        case "hosted":
			append_hf("X-LineBlocs-Fulfill-Type: hosted\r\n");
			rest_append_hf("X-Lineblocs-Carrier-Auth: CARRIER_KEY");
			$var(query) = "did=" + $tU + "&from=" + $fU + "&source=" + $si + "&addr=" + $si;
			$var(reg) = "/\+/%2B/g";
			async(rest_get("$API_URL/user/getDIDAssignedIP?$(var(query){re.subst,$var(reg)})", $var(body), $var(ct), $var(rcode)), did_assigned_resume);
        break;
        case "byo_carrier":
			append_hf("X-LineBlocs-Fulfill-Type: byo_carrier\r\n");
			rest_append_hf("X-Lineblocs-Carrier-Auth: CARRIER_KEY");
			$var(query) = "did=" + $tU + "&from=" + $fU + "&source=" + $si + "&addr=" + $si;
			$var(reg) = "/\+/%2B/g";
			async(rest_get("$API_URL/user/getDIDAssignedIP?$(var(query){re.subst,$var(reg)})", $var(body), $var(ct), $var(rcode)), did_assigned_resume);
        break;
	}
}
route[trunk_validation_resume] {
	if ($var(rcode) != 200)
	{
		# lookup user SIP trunks next
		send_reply(500, "PSTN Routing Failed #2");
		exit;
	}

	append_hf("X-LineBlocs-Fulfill-Type: hosted\r\n");
	rest_append_hf("X-Lineblocs-Carrier-Auth: CARRIER_KEY");
	$var(query) = "did=" + $tU + "&from=" + $fU + "&source=" + $si + "&addr=" + $si;
	$var(reg) = "/\+/%2B/g";
	async(rest_get("$API_URL/user/getTrunkAssignedIP?$(var(query){re.subst,$var(reg)})", $var(body), $var(ct), $var(rcode)), trunk_assigned_resume);
}


route[user_sip_trunk_resume] {
	if ($var(rcode) != 200) 
	{
		send_reply(500, "PSTN Routing Failed #3");
		exit;
	}

	rest_append_hf("X-Lineblocs-Carrier-Auth: CARRIER_KEY");
	append_hf("X-Lineblocs-User-SIP-Trunk-Addr: $var(body)\r\n");
	$var(query) = "did=" + $tU + "&from=" + $fU + "&source=" + $si + "&addr=" + $si;
	$var(reg) = "/\+/%2B/g";
	async(rest_get("$API_URL/user/getDIDAssignedIP?$(var(query){re.subst,$var(reg)})", $var(body), $var(ct), $var(rcode)), did_assigned_resume);
}

route[incoming_validation_resume_2] {
	if ($var(rcode) != 204) 
	{
		send_reply(500, "PSTN Routing Failed #4");
		exit;
	}

	rest_append_hf("X-Lineblocs-Carrier-Auth: CARRIER_KEY");
	$var(query) = "did=" + $tU + "&from=" + $fU + "&source=" + $si + "&addr=" + $si;
	$var(reg) = "/\+/%2B/g";
	async(rest_get("$API_URL/user/getDIDAssignedIP?$(var(query){re.subst,$var(reg)})", $var(body), $var(ct), $var(rcode)), did_assigned_resume);
}

route[did_assigned_resume] {
	if ($var(rcode) != 200) 
	{
		send_reply(400, "Bad Request -- DID lookup failed");
		exit;
	}

	$ru = "sip:" + $rU + "@" + $var(body);
	rest_append_hf("X-Lineblocs-Carrier-Auth: CARRIER_KEY");
	$var(query) = "did=" + $tU + "&addr=" + $si;
	$var(reg) = "/\+/%2B/g";
	async(rest_get("$API_URL/user/getDIDAcceptOption?$(var(query){re.subst,$var(reg)})", $var(body), $var(ct), $var(rcode)), call_action_resume);
}

route[trunk_assigned_resume] {
	if ($var(rcode) != 200) 
	{
		send_reply(400, "Bad Request");
		exit;
	}

	$ru = "sip:" + $rU + "@" + $var(body);
	#rest_append_hf("X-Lineblocs-Carrier-Auth: CARRIER_KEY");
	append_hf("X-LineBlocs-Key: $LINEBLOCS_KEY\r\n");
	append_hf("X-LineBlocs-Accept-Call-Type: voice\r\n");
	append_hf("X-LineBlocs-Direction: outgoing-proxy-trunk\r\n");
	append_hf("X-Lineblocs-Trunk-SourceIP: $fd\r\n");
	route(relay);
}

route[call_action_resume] {
	if ($var(rcode) != 200) 
	{
		send_reply(400, "Bad Request");
		exit;
	}

	append_hf("X-LineBlocs-Key: $LINEBLOCS_KEY\r\n");
	switch($var(body))
	{
		case "accept-call":
			log("accept-call action is set..");
			append_hf("X-LineBlocs-Accept-Call-Type: voice\r\n");
			append_hf("X-LineBlocs-Direction: incoming-proxy\r\n");
			async(rest_get("$API_URL/getBestRTPProxy", $var(body), $var(ct), $var(rcode)), rtpproxy_selection_resume);
			#route(relay);
		break;
		case "accept-fax":
			log("accept-fax action is set..");
			append_hf("X-LineBlocs-Accept-Call-Type: fax\r\n");
			append_hf("X-LineBlocs-Direction: incoming-proxy\r\n");
			route(relay);
		break;
	}
}

route[rtpproxy_selection_resume] {
	if ($var(rc) < 0) 
	{
		send_reply(500, "Server Internal Error");
		exit;
	}

	if ($var(rcode) != 200) 
	{
		send_reply(403, "Forbidden");
		exit;
	}

	xlog("got preferred RTP proxy\r\n");
	xlog("setting SIP header\r\n");
	append_hf("X-LineBlocs-RTPProxy: $var(body)\r\n");
	route(relay);
}

route[register_resume] {
	xlog("REG in register resume.. rc = $rc\r\n");
	$var(rc) = $rc;

	if ($var(rc) < 0) 
	{
		send_reply(500, "Server Internal Error");
		exit;
	}

	if ($var(rcode) != 204) 
	{
		send_reply(403, "Forbidden");
		exit;
	}

	xlog("REG checking auth rc = $rc\r\n");
	$var(auth_code) = www_authorize("", "subscriber");
	if ($var(auth_code) == -1 || $var(auth_code) == -2) 
	{
			## uncomment to enable fail2ban
			#xlog("L_NOTICE","REG Auth error for $fU@$fd from $si cause $var(auth_code)");
			#exit;
	}

	if ( $var(auth_code) < 0 ) 
	{
			www_challenge("", "auth,auth-int");
			exit;
	}
	fix_nated_register();
	fix_nated_contact();
	xlog("L_NOTICE","Register succeeded for $fU@$fd from $si cause $var(auth_code)");
	
	if (!save("location")) 
	{
		sl_reply_error();
	}

	$var(body) = "domain=" + $fd + "&ip=" + $si" + "&user=" + $fU + "&contact=" + $hdr(Contact) + "&expires=" + $hdr(Expires) + "&addr=" + $si;
	$var(reg) = "/\+/%2B/g";
	async(rest_post("$API_URL/user/storeRegistration", "$(var(body){re.subst,$var(reg)})", "application/x-www-form-urlencoded", $var(body), $var(ctype), $var(rcode)), register_store_resume);

	exit;
}

route[register_store_resume] {
	xlog("in register store resume.. rc = $rc\r\n");
	$var(rc) = $rc;

	if ($var(rc) < 0) 
	{
		send_reply(500, "Server Internal Error");
		exit;
	}

	if ($var(rcode) != 204) 
	{
		send_reply(403, "Forbidden");
		exit;
	}

	exit;
}

route[sip_report_resume] {
	xlog("in sip report resume.. rc = $rc\r\n");
	exit;
}

route[incoming_ms_validate_1_route] {
	if ($var(rcode) != 204) 
	{
		send_reply(500, "Media server Routing Failed (scenario 1)");
		exit;
	}

	append_hf("X-LineBlocs-RingSubscriber: true\r\n");
	uac_replace_from("", "sip:$fU@$fd");
	$ru = "sip:" + $rU + "@" + $hdr(X-LineBlocs-Domain);
	route(relay);
	exit;
}

route[incoming_ms_validate_2_route] {
	if ($var(rcode) != 204) 
	{
		send_reply(500, "Media server Routing Failed (scenario 2)");
		exit;
	}

	$var(body) = "callid=" + $hdr(Call-ID) + "&apiid=" + $hdr(X-LineBlocs-API-CallId) + "&source=" + $si;
	$var(reg) = "/\+/%2B/g";
	async(rest_post("$API_URL/call/setSIPCallID", "$(var(body){re.subst,$var(reg)})", "application/x-www-form-urlencoded", $var(body), $var(ctype), $var(rcode)), ms_pstn_start_route);
	exit;
}

route[ms_pstn_start_route] {
	if ($var(rcode) != 200) 
	{
		send_reply(500, "Media server Routing Failed (scenario 2)");
		exit;
	}

	$var(query) = "from=" + $fU + "&to=" + $tU + "&domain=" + $hdr(X-LineBlocs-Domain) + "&source=" + $si + "&addr=" + $si;
	$var(reg) = "/\+/%2B/g";
	async(rest_get("$API_URL/user/getPSTNProviderIP?$(var(query){re.subst,$var(reg)})", $var(body), $var(ct), $var(rcode)), ms_pstn_process_route);
	exit;
}


route[ms_pstn_process_route] {
	if ($var(rcode) != 200) 
	{
		send_reply(500, "Media server Failed");
		exit;
	}

	# initiate routing data...
	$avp(body) = $(var(body));
	$json(object) := $(avp(body));
    $ru = "sip:" + $(json(object/did)) + "@" + $(json(object/ip_addr));
	$var(body) = "ip="  + $(json(object/ip_addr)) +  "&apiid=" + $hdr(X-LineBlocs-API-CallId);
	$var(reg) = "/\+/%2B/g";

	# tell API what provider is being used...
	async(rest_post("$API_URL/call/setProviderByIP", "$(var(body){re.subst,$var(reg)})", "application/x-www-form-urlencoded", $var(body), $var(ctype), $var(rcode)), ms_pstn_resume_and_finalize_routing);
	exit;
}

route[ms_pstn_resume_and_finalize_routing] {
	if ($var(rcode) != 200) 
	{
		send_reply(500, "Media server Routing Failed (scenario 3)");
		exit;
	}

	# start routing
	route(relay_ms_to_pstn);
	exit;
}

route[verify_caller_route] {
	xlog("verify caller result $rc\r\n");
	if ($var(rcode) != 204) 
	{
		$var(body) = "domain=" + $fd + "&type=verify-callerid-failed" + "&addr=" + $si;
		$var(reg) = "/\+/%2B/g";
		async(rest_post("$API_URL/debugger/createLogSimple", "$(var(body){re.subst,$var(reg)})", "application/x-www-form-urlencoded", $var(body), $var(ctype), $var(rcode)), verify_forbidden_resume);
		send_reply(403, "Forbidden");
		exit;
	}

	xlog("making call now..");
	$var(query) = "username=" + $fu + "&domain=" + $fd + "&routerip=" +  $socket_in(ip) + "&addr=" + $si;
	$var(reg) = "/\+/%2B/g";
	async(rest_get("$API_URL/user/getUserAssignedIP?username=$(var(query){re.subst,$var(reg)})", $var(body), $var(ct), $var(rcode)), pstn_query_route);
}

route[verify_forbidden_resume] {
	send_reply(403, "Forbidden");
	exit;
}

route[pstn_query_route] {
	xlog("pstn query result $(var(body))\r\n");
    $ru = "sip:" + $rU + "@" + $var(body);
	append_hf("X-LineBlocs-Key: $LINEBLOCS_KEY\r\n");
	append_hf("X-LineBlocs-Call-Type: pstn\r\n");
	append_hf("X-LineBlocs-Direction: outgoing-proxy\r\n");
	uac_replace_from("", "sip:$fU@$fd");

	# check if this request is a invite
	if (is_method("INVITE")) 
	{
		# for each branch we will call the function below
		t_on_branch("per_branch_ops");

		# for each reply we will call the function below
		t_on_reply("handle_nat");

		# if the call was not completed, so failure route
		t_on_failure("pstn_failure");

		if(nat_uac_test(127))
		{
			# user identified as behing a nat
			#xlog("we are on route relay, user behind nat");
			fix_nated_contact();
		}

		# if we have an application/sdp on our body, so we execute
        # the rtpproxy_offer
		if(has_body("application/sdp"))
		{
			#xlog("we have sdp on this $rm");
			rtpproxy_offer("froc", "$PUBLIC_IPV4");
		}
	
	}

	# removing the rtpproxy session
	if(is_method("CANCEL|BYE"))
	{
		rtpproxy_unforce();
	}

    if (!t_relay()) 
	{
      send_reply(500,"Internal Error");
    };

	exit;
}

route[mediaservice_query_route] {
    $ru = "sip:" + $rU + "@" + $var(body);
	append_hf("X-LineBlocs-Key: $LINEBLOCS_KEY\r\n");
	append_hf("X-LineBlocs-Call-Type: media\r\n");
	append_hf("X-LineBlocs-Direction: outgoing-proxy\r\n");

	if (is_method("INVITE")) 
	{
		# for each branch we will call the function below
		t_on_branch("per_branch_ops");

		# for each reply we will call the function below
		t_on_reply("handle_nat");

		# if the call was not completed, so failure route
		t_on_failure("missed_call");

		if(nat_uac_test(127))
		{
			# user identified as behing a nat
			fix_nated_contact();
		}

		# if we have an application/sdp on our body, so we execute
        # the rtpproxy_offer
		if(has_body("application/sdp"))
		{
			rtpproxy_offer("froc", "$PUBLIC_IPV4");
		}
	}

	# removing the rtpproxy session
	if(is_method("CANCEL|BYE"))
	{
		rtpproxy_unforce();
	}

    if (!t_relay()) 
	{
      send_reply(500,"Internal Error");
    };

	exit;
}

route[endpoint_query_route] {
    $ru = "sip:" + $rU + "@" + $var(body);
	append_hf("X-LineBlocs-Key: $LINEBLOCS_KEY\r\n");
	append_hf("X-LineBlocs-Call-Type: endpoint\r\n");
	append_hf("X-LineBlocs-Direction: outgoing-proxy\r\n");

	# check if this request is a invite
	if (is_method("INVITE")) 
	{
		# for each branch we will call the function below
		t_on_branch("per_branch_ops");

		# for each reply we will call the function below
		t_on_reply("handle_nat");

		# if the call was not completed, so failure route
		t_on_failure("missed_call");

		if(nat_uac_test(127))
		{
			# user identified as behing a nat
			fix_nated_contact();
		}

		# if we have an application/sdp on our body, so we execute
        # the rtpproxy_offer
		if(has_body("application/sdp"))
		{
			rtpproxy_offer("froc", "$PUBLIC_IPV4");
		}
	}

	# removing the rtpproxy session
	if(is_method("CANCEL|BYE"))
	{
		rtpproxy_unforce();
	}

    if (!t_relay()) 
	{
      send_reply(500,"Internal Error");
    };

	exit;
}

branch_route[per_branch_ops] {
	exit;
}

onreply_route[handle_nat] {
	# capture any sip packets
	sip_capture();	

	# we receive a reply, we need to check about application/sdp 
    # on our body, if we have, we answer that
	if(is_method("ACK") && has_body("application/sdp"))
	{
		rtpproxy_answer("froc", "$PUBLIC_IPV4");
	} else if(has_body("application/sdp")) {
		# offering rtpproxy on a non ack message
		rtpproxy_offer("froc", "$PUBLIC_IPV4");	
	}

	# here we try to identify if the user is behind a nat again
    # but now is the second user (the called user) 
	if(nat_uac_test(127))
	{
		fix_nated_contact();
	}
}

onreply_route[pstn_handle_nat] {
	# capture any sip packets
	sip_capture();

	# we receive a reply, we need to check about application/sdp 
    # on our body, if we have, we answer that

	if(is_method("ACK") && has_body("application/sdp"))
	{
		rtpproxy_answer("froc", "$PUBLIC_IPV4");
	} else if(has_body("application/sdp")) {
		# offering rtpproxy on a non ack message
		rtpproxy_offer("froc", "$PUBLIC_IPV4");	
	}

	# here we try to identify if the user is behind a nat again
    # but now is the second user (the called user) 
	if(nat_uac_test(127))
	{
		fix_nated_contact();
	}

	# update SIP details
	$var(body) = "requestto=" + $ru + "&user=" + $fU + "&domain=" + $fd + "&callid=" + $hdr(Call-ID) + "&status=" + $rs;
	$var(reg) = "/\+/%2B/g";
	async(rest_post("$API_URL/carrier/createSIPReport", "$(var(body){re.subst,$var(reg)})", "application/x-www-form-urlencoded", $var(body), $var(ctype), $var(rcode)), sip_report_resume);
}

failure_route[missed_call] {
	if (t_was_cancelled()) 
	{
		exit;
	}
}

route[relay_to_user_trunk] {
	xlog("pstn query result $(var(body))\r\n");
    $ru = "sip:" + $rU + "@" + $hdr(X-Lineblocs-User-SIP-Trunk-Addr);
	append_hf("X-LineBlocs-Call-Type: pstn\r\n");
	append_hf("X-LineBlocs-Direction: incoming-pstn-to-trunk\r\n");
	uac_replace_from("", "sip:$fU@$fd");

	# check if this request is a invite
	if (is_method("INVITE")) 
	{
		# for each branch we will call the function below
		t_on_branch("per_branch_ops");

		# for each reply we will call the function below
		t_on_reply("handle_nat");

		# if the call was not completed, so failure route
		t_on_failure("pstn_failure");

		if(nat_uac_test(127))
		{
			# user identified as behing a nat
			#xlog("we are on route relay, user behind nat");
			fix_nated_contact();
		}

		# if we have an application/sdp on our body, so we execute
        # the rtpproxy_offer
		if(has_body("application/sdp"))
		{
			#xlog("we have sdp on this $rm");
			rtpproxy_offer("froc", "$PUBLIC_IPV4");
		}
	}

	# removing the rtpproxy session
	if(is_method("CANCEL|BYE"))
	{
		rtpproxy_unforce();
	}

    if (!t_relay()) 
	{
      send_reply(500,"Internal Error");
    };

	exit;
}

failure_route[pstn_failure] {
	
	if (t_was_cancelled())
	{
		exit;
	}

	$var(body) = "requestto=" + $ru + "&user=" + $fU + "&domain=" + $fd + "&callid=" + $hdr(Call-ID) + "&status=" + $rs;
	$var(reg) = "/\+/%2B/g";
	async(rest_post("$API_URL/carrier/createSIPReport", "$(var(body){re.subst,$var(reg)})", "application/x-www-form-urlencoded", $var(body), $var(ctype), $var(rcode)), sip_report_resume);
}

route[capture_hep_route] {

	#Logs Or Stats
	if($var(proto) == 100 || $var(proto) == 99) {
		if ($var(correlation_id) == null) {
			xlog("NO CORRELATION ID! SET SOMETHING OR DROP");
			exit;
		}
		/* get a generic chunk */
		hep_get("proto_type", "utf8-string", $var(data), $var(vid));
		$var(proto_type) = "3"; /* 0x03 - SDP protocol */

		report_capture($var(correlation_id), "rtcp_log");
		/* setting the 2nd parameter, even if setting it to null, is mandatory in order to be able to set proto type */
		report_capture($var(correlation_id), , $var(proto_type));
		report_capture($var(correlation_id), "rtcp_log", $var(proto_type));
		exit;
	}

	hep_resume_sip();
	
}