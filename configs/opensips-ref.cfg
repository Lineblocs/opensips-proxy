log_level=7
log_stderror=no

#log_facility=LOG_LOCAL0
log_facility=LOG_LOCAL7
debug_mode==yes
fork=no

udp_workers=1

/* uncomment the following line to enable debugging */
#debug_mode=yes

/* uncomment the next line to enable the auto temporary blacklisting of 
   not available destinations (default disabled) */
#disable_dns_blacklist=no

/* uncomment the next line to enable IPv6 lookup after IPv4 dns 
   lookup failures (default disabled) */
#dns_try_ipv6=yes

/* comment the next line to enable the auto discovery of local aliases
   based on revers DNS on IPs */
auto_aliases=no


listen=udp:PRIVATE_IPV4:5060   # CUSTOMIZE ME
alias=udp:PUBLIC_IPV4:5060
advertised_address="PUBLIC_IPV4"

####### Modules Section ########

#set module path
#mpath="/usr/local/lib64/opensips/modules/"
mpath="/usr/lib/x86_64-linux-gnu/opensips/modules/"

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

loadmodule "auth.so"
loadmodule "auth_db.so"
# ----- auth_db params -----
modparam("auth_db", "calculate_ha1", yes)
modparam("auth_db", "password_column", "password")
modparam("auth_db", "db_url","mysql://DB_USER:DB_PASSWORD@DB_HOST/DB_NAME")
modparam("auth_db", "load_credentials", "")
modparam("auth_db", "use_domain", 1)

loadmodule "domain.so"
# ----- domain params -----
modparam("domain", "db_url", "mysql://DB_USER:DB_PASSWORD@DB_HOST/DB_NAME")
modparam("domain", "db_mode", 0)   # Use caching


#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 1)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"


loadmodule "db_mysql.so"

loadmodule "avpops.so"
# default URL
modparam("avpops","db_url","mysql://DB_USER:DB_PASSWORD@DB_HOST/DB_NAME")


#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)


#### USeR LOCation module
loadmodule "usrloc.so"
modparam("usrloc", "nat_bflag", "NAT")
modparam("usrloc", "db_mode",   0)
modparam("usrloc", "db_url", "mysql://DB_USER:DB_PASSWORD@DB_HOST/DB_NAME")

#### REGISTRAR module
loadmodule "registrar.so"
modparam("registrar", "received_avp", "$avp(received)")

/* uncomment the next line not to allow more than 10 contacts per AOR */
#modparam("registrar", "max_contacts", 10)


loadmodule "nathelper.so"
modparam("nathelper", "ping_nated_only", 1) # Ping only clients behind NAT
modparam("nathelper", "sipping_bflag", "8")
modparam("nathelper", "received_avp", "$avp(received)")
modparam("nathelper", "force_socket", "udp:PRIVATE_IPV4:7722")

loadmodule "rtpproxy.so"
# RTPProxy setup
modparam("rtpproxy", "rtpproxy_sock", "udp:127.0.0.1:22222")
modparam("rtpproxy", "rtpproxy_disable_tout", 20)
modparam("rtpproxy", "rtpproxy_autobridge", 1)
modparam("rtpproxy", "rtpproxy_retr", 2)
modparam("rtpproxy", "nortpproxy_str", "a=sdpmangled:yes\r\n")


loadmodule "uac.so"

#### ACCounting module
loadmodule "acc.so"
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_cancels", 0)
/* by default we do not adjust the direct of the sequential requests.
   if you enable this parameter, be sure the enable "append_fromtag"
   in "rr" module */
modparam("acc", "detect_direction", 0)


#### UDP protocol
loadmodule "proto_udp.so"


# ----- multi-module params -----
modparam("alias_db|auth_db|usrloc", "use_domain", 1)

loadmodule "rest_client.so"
modparam("rest_client", "connection_timeout", 300)
modparam("rest_client", "connect_poll_interval", 2)
loadmodule "json.so"

####### Routing Logic ########

#ss_maxfwd_header request routing logic


route{
	if($ua=~"friendly-scanner") {
		 xlog("L_ERROR", "Auth error for $fU@$fd from $si method $rm
	 user-agent (friendly-scanner)\n");
		 drop();
		 exit;
        }
	if (!mf_process_maxfwd_header(10)) {
		sl_send_reply(483,"Too Many Hops");
		exit;
	}



	if (has_totag()) {
		# sequential request withing a dialog should
        # take the path determined by record-routing
		if (loose_route()) {
			if (is_method("INVITE")) {
                		record_route_preset("PUBLIC_IPV4");
				record_route();
			}

			route(relay);
		} else {
			if ( is_method("ACK") ) {
				if ( t_check_trans() ) {
					t_relay();
					exit;
				} else {
					#xlog("We are on has_totag, our method is not ACK [ $rm ] ");
					# ACK without matching transaction ->
                                        # ignore and discard
					exit;
				}
			}
			
			sl_send_reply(404,"Not here");
		}
		exit;
	}

	# Cancel processing
	if (is_method("CANCEL"))
	{
		if (t_check_trans())
			t_relay();
		exit;
	}

	t_check_trans();

	
	if ( !(is_method("REGISTER")  ) ) {
		if (is_myself("$fu"))
		{
		} else {
			# if caller is not local, then called number must be local
			if (!is_myself("$rd")) {
				#xlog("sending back 403. we don't know this domain..");
				send_reply(403,"Rely forbidden");
				exit;
			}
		}
	}

	# preloaded route checking
	if (loose_route()) {
		#xlog("L_ERR", "Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]");
		if (!is_method("ACK"))
			sl_send_reply(403,"Preload Route denied");
		exit;
	}

	# record routing
	if (!is_method("REGISTER|MESSAGE"))
		record_route();


	# If we are not the final destination the call is
	# to a external destination
	if (!is_myself("$rd")) {
		#xlog("is_myself failed routing to relay..");
		append_hf("P-hint: outbound\r\n"); 
		route(relay);
	}

	# We dont accept publish or subscribe here
	if (is_method("PUBLISH|SUBSCRIBE"))
	{
		sl_send_reply(503, "Service Unavailable");
		exit;
	}


	if (is_method("REGISTER"))
	{
		$var(query) = "domain=" + $fd + "&ip=" + $si";
		$var(reg) = "/\+/%2B/g";
		async(rest_get("https://internals.lineblocs.com/user/ipWhitelistLookup?$(var(query){re.subst,$var(reg)})", $var(body), $var(ct), $var(rcode)), register_resume);
		exit;
	}

	if ($rU==NULL) {
		#requisicao com endereco incompleto
		sl_send_reply(484,"Address Incomplete");
		exit;
	}

	xlog("RECEIVED KEY: $hdr(X-LineBlocs-Key)\r\n");
	xlog("RECEIVED AGENT: $hdr(User-Agent)\r\n");
	if ($hdr(X-LineBlocs-Key) == "LINEBLOCS_KEY") { #internal asterisk
		remove_hf("X-LineBlocs-Key");
		xlog("received media server request from $si\r\n");
		if (is_method("INVITE")) {
			if ($hdr(X-LineBlocs-Route-Type) == "extension")
			{
				   async(rest_get("https://internals.lineblocs.com/user/incomingMediaServerValidation?source=$si", $var(body), $var(ct), $var(rcode)), incoming_ms_validate_1_route);
				   #route(relay);
				   exit;
			}

			if ($hdr(X-LineBlocs-Route-Type) == "pstn")
			{
			#	xlog("L_NOTICE", "calling URL: https://internals.lineblocs.com/user/getPSTNProviderIP?from=$fU&to=$tU&domain=$hdr(X-LineBlocs-Domain)");

				async(rest_get("https://internals.lineblocs.com/user/incomingMediaServerValidation?source=$si", $var(body), $var(ct), $var(rcode)), incoming_ms_validate_2_route);
				exit;
			}

		}
		exit;
	}
	xlog("User agent is: $hdr(User-Agent)\r\n");
	if (is_registered("location","$fu") || $hdr(User-Agent) == "IM-client/OMA1.0 sipML5-v1.2016.03.04") { #end device
		xlog("Using registered routing..\r\n");
		if (is_method("INVITE")) {
			if($rU =~ "[0-9]{1,}") {
					if ($rU=~"^[0-9]{9,}") { ## call to PSTN
						$var(query) = "number=" + $tU + "&domain=" + $fd;
						$var(reg) = "/\+/%2B/g";
						async(rest_get("https://internals.lineblocs.com/user/verifyCallerByDomain?$(var(query){re.subst,$var(reg)})", $var(body), $var(ct), $var(rcode)), verify_caller_route);
						exit;
					} else if ($rU=~"^[0-9]{1,5}$") { ## call to another end device


						$var(query) = "username=" + $fu + "&domain=" + $fd;
						$var(reg) = "/\+/%2B/g";

						async(rest_get("https://internals.lineblocs.com/user/getUserAssignedIP?$(var(query){re.subst,$var(reg)})", $var(body), $var(ct), $var(rcode)), endpoint_query_route);
						exit;	
					}

				} else if ($rU=~"^\*[1-9]+") { ## media service call

					$var(query) = "username=" + $fu + "&domain=" + $fd;
					$var(reg) = "/\+/%2B/g";
					async(rest_get("https://internals.lineblocs.com/user/getUserAssignedIP?$(var(query){re.subst,$var(reg)})", $var(body), $var(ct), $var(rcode)), mediaservice_query_route);
					exit;
				}
		}
	}


	if (is_method("INVITE")) { ## call from PSTN
		xlog("SOURCE IP IS: $si");
		$var(query) = "did=" + $tU + "&number=" + $fU + "&source=" + $si;
		$var(reg) = "/\+/%2B/g";

		async(rest_get("https://internals.lineblocs.com/user/incomingPSTNValidation?$(var(query){re.subst,$var(reg)})", $var(body), $var(ct), $var(rcode)), incoming_validation_resume);
		exit;
	}
	route(relay);
}


route[relay] {

	# check if this request is a invite
	
	if (is_method("INVITE")) {
		# for each branch we will call the function below
		
		t_on_branch("per_branch_ops");

		# for each reply we will call the function below
		
		t_on_reply("handle_nat");

		# if the call was not completed, so failure route
		t_on_failure("missed_call");


		if(nat_uac_test(127)){
			# user identified as behing a nat
			#xlog("we are on route relay, user behind nat");
			fix_nated_contact();
		}

		# if we have an application/sdp on our body, so we execute
                # the rtpproxy_offer
		if(has_body("application/sdp")){
			#xlog("we have sdp on this $rm");
			rtpproxy_offer("froc", "PUBLIC_IPV4");
		}
	
		if (lookup("location","m")) {
			#xlog("request uri is now $ru");
		}
	}

	# removing the rtpproxy session
	if(is_method("CANCEL|BYE")){
	#xlog("L_NOTICE", "route sending BYE to other end..  info from: $fu, to: $tu");
		rtpproxy_unforce();
	}


    if (!t_relay()) {
      send_reply(500,"Internal Error");
    };
	exit;
}

route[bye_query_route] {
        $ru = "sip:" + $rU + "@" + $avp(value);
	# removing the rtpproxy session
	if(is_method("CANCEL|BYE")){
		rtpproxy_unforce();
	}


    if (!t_relay()) {
      send_reply(500,"Internal Error");
    };
	exit;

}

route[incoming_validation_resume] {
	if ($var(rcode) != 204) {
		send_reply(500, "Routing Failed");
		exit;
	}
	$var(query) = "did=" + $tU + "&from=" + $fU + "&source=" + $si;
	$var(reg) = "/\+/%2B/g";
	async(rest_get("https://internals.lineblocs.com/user/getDIDAssignedIP?$(var(query){re.subst,$var(reg)})", $var(body), $var(ct), $var(rcode)), did_assigned_resume);
}

route[did_assigned_resume] {
	if ($var(rcode) != 200) {
		send_reply(400, "Bad Request");
		exit;
	}
	$ru = "sip:" + $rU + "@" + $var(body);

	$var(query) = "did=" + $tU;
	$var(reg) = "/\+/%2B/g";
	async(rest_get("https://internals.lineblocs.com/user/getDIDAcceptOption?$(var(query){re.subst,$var(reg)})", $var(body), $var(ct), $var(rcode)), call_action_resume);
}

route[call_action_resume] {
	if ($var(rcode) != 200) {
		send_reply(400, "Bad Request");
		exit;
	}

	append_hf("X-LineBlocs-Key: LINEBLOCS_KEY\r\n");

        switch($var(body))
        {
            case "accept-call":
                log("accept-call action is set..");

		append_hf("X-LineBlocs-Accept-Call-Type: voice\r\n");
		append_hf("X-LineBlocs-Direction: incoming-proxy\r\n");
		route(relay);
            break;
            case "accept-fax":
		log("accept-fax action is set..");
		append_hf("X-LineBlocs-Accept-Call-Type: fax\r\n");
		append_hf("X-LineBlocs-Direction: incoming-proxy\r\n");
		route(relay);
            break;
	}

}


route[register_resume] {
	xlog("in register resume.. rc = $rc\r\n");
	$var(rc) = $rc;
	if ($var(rc) < 0) {
		send_reply(500, "Server Internal Error");
		exit;
	}

	if ($var(rcode) != 204) {
		send_reply(403, "Forbidden");
		exit;
	}
	$var(auth_code) = www_authorize("", "subscriber");
	if ( $var(auth_code) == -1 || $var(auth_code) == -2 ) {
			## uncomment to enable fail2ban
			#xlog("L_NOTICE","Auth error for $fU@$fd from $si cause $var(auth_code)");
	}
	if ( $var(auth_code) < 0 ) {
			www_challenge("", 0);
			exit;
	}
	fix_nated_register();
	fix_nated_contact();
	xlog("L_NOTICE","Register succeeded for $fU@$fd from $si cause $var(auth_code)");
	
	if (!save("location")) {
		sl_reply_error();
	}
	$var(query) = "domain=" + $fd + "&ip=" + $si" + "&user=" + $fU + "&contact=" + $hdr(Contact) + "&expires=" + $hdr(Expires);
	$var(reg) = "/\+/%2B/g";
	async(rest_post("https://internals.lineblocs.com/user/storeRegistration", "$(var(body){re.subst,$var(reg)})", "application/x-www-form-urlencoded", $var(body), $var(ctype), $var(rcode)), register_store_resume);

	exit;


}
route[register_store_resume] {
	xlog("in register store resume.. rc = $rc\r\n");
	$var(rc) = $rc;
	if ($var(rc) < 0) {
		send_reply(500, "Server Internal Error");
		exit;
	}

	if ($var(rcode) != 204) {
		send_reply(403, "Forbidden");
		exit;
	}
	exit;
}


route[incoming_ms_validate_1_route] {
	if ($var(rcode) != 204) {
		send_reply(500, "Routing Failed");
		exit;
	}
	uac_replace_from("", "sip:$fU@$fd");
	$ru = "sip:" + $rU + "@" + $hdr(X-LineBlocs-Domain);
	route(relay);
	exit;
}

route[incoming_ms_validate_2_route] {
	if ($var(rcode) != 204) {
		send_reply(500, "Routing Failed");
		exit;
	}
	$var(query) = "from=" + $fU + "&to=" + $tU + "&domain=" + $hdr(X-LineBlocs-Domain) + "&source=" + $si;
	$var(reg) = "/\+/%2B/g";
	async(rest_get("https://internals.lineblocs.com/user/getPSTNProviderIP?$(var(query){re.subst,$var(reg)})", $var(body), $var(ct), $var(rcode)), pstn_out_route);
	exit;
}


route[pstn_out_route] {
	$avp(body) = $(var(body));
	$json(object) := $(avp(body));
        $ru = "sip:" + $(json(object/did)) + "@" + $(json(object/ip_addr));
	route(relay);
	exit;
}

route[verify_caller_route] {
	xlog("verify caller result $rc\r\n");
	if ($var(rcode) != 204) {
		$var(query) = "domain=" + $fd + "&type=verify-callerid-failed";
		$var(reg) = "/\+/%2B/g";

		async(rest_post("https://internals.lineblocs.com/debugger/createLogSimple", "$(var(query){re.subst,$var(reg)})", "application/x-www-form-urlencoded", $var(body), $var(ctype), $var(rcode)), verify_forbidden_resume);
		send_reply(403, "Forbidden");
		exit;
	}

	xlog("making call now..");
	$var(query) = "username=" + $fu + "&domain=" + $fd;
	$var(reg) = "/\+/%2B/g";

	async(rest_get("https://internals.lineblocs.com/user/getUserAssignedIP?username=$(var(query){re.subst,$var(reg)})", $var(body), $var(ct), $var(rcode)), pstn_query_route);
}

route[verify_forbidden_resume] {
	send_reply(403, "Forbidden");
		exit;
}



route[pstn_query_route] {
	xlog("pstn query result $(var(body))\r\n");
        $ru = "sip:" + $rU + "@" + $var(body);
	append_hf("X-LineBlocs-Key: LINEBLOCS_KEY\r\n");
	append_hf("X-LineBlocs-Call-Type: pstn\r\n");
	append_hf("X-LineBlocs-Direction: outgoing-proxy\r\n");
	uac_replace_from("", "sip:$fU@$fd");

	# check if this request is a invite
	if (is_method("INVITE")) {
		# for each branch we will call the function below
		
		t_on_branch("per_branch_ops");

		# for each reply we will call the function below
		
		t_on_reply("handle_nat");

		# if the call was not completed, so failure route
		t_on_failure("missed_call");


		if(nat_uac_test(127)){
			# user identified as behing a nat
			#xlog("we are on route relay, user behind nat");
			fix_nated_contact();
		}

		# if we have an application/sdp on our body, so we execute
        # the rtpproxy_offer
		if(has_body("application/sdp")){
			#xlog("we have sdp on this $rm");
			rtpproxy_offer("froc", "PUBLIC_IPV4");
		}
	
	}

	# removing the rtpproxy session
	if(is_method("CANCEL|BYE")){
		rtpproxy_unforce();
	}


    if (!t_relay()) {
      send_reply(500,"Internal Error");
    };
	exit;
}
route[mediaservice_query_route] {

        $ru = "sip:" + $rU + "@" + $var(body);
	append_hf("X-LineBlocs-Key: LINEBLOCS_KEY\r\n");
	append_hf("X-LineBlocs-Call-Type: media\r\n");
	append_hf("X-LineBlocs-Direction: outgoing-proxy\r\n");

	if (is_method("INVITE")) {
		# for each branch we will call the function below
		
		t_on_branch("per_branch_ops");

		# for each reply we will call the function below
		
		t_on_reply("handle_nat");

		# if the call was not completed, so failure route
		t_on_failure("missed_call");

		if(nat_uac_test(127)){
			# user identified as behing a nat
			fix_nated_contact();
		}

		# if we have an application/sdp on our body, so we execute
        # the rtpproxy_offer
		if(has_body("application/sdp")){
			rtpproxy_offer("froc", "PUBLIC_IPV4");
		}
	}

	# removing the rtpproxy session
	if(is_method("CANCEL|BYE")){
		rtpproxy_unforce();
	}


    if (!t_relay()) {
      send_reply(500,"Internal Error");
    };
	exit;

}

route[endpoint_query_route] {

        $ru = "sip:" + $rU + "@" + $var(body);
	append_hf("X-LineBlocs-Key: LINEBLOCS_KEY\r\n");
	append_hf("X-LineBlocs-Call-Type: endpoint\r\n");
	append_hf("X-LineBlocs-Direction: outgoing-proxy\r\n");

	# check if this request is a invite
	if (is_method("INVITE")) {
		# for each branch we will call the function below
		
		t_on_branch("per_branch_ops");

		# for each reply we will call the function below
		
		t_on_reply("handle_nat");

		# if the call was not completed, so failure route
		t_on_failure("missed_call");


		if(nat_uac_test(127)){
			# user identified as behing a nat
			fix_nated_contact();
		}

		# if we have an application/sdp on our body, so we execute
        # the rtpproxy_offer
		if(has_body("application/sdp")){
			rtpproxy_offer("froc", "PUBLIC_IPV4");
		}
	}

	# removing the rtpproxy session
	if(is_method("CANCEL|BYE")){
		rtpproxy_unforce();
	}


    if (!t_relay()) {
      send_reply(500,"Internal Error");
    };
	exit;

}




branch_route[per_branch_ops] {
	exit;
}

onreply_route[handle_nat] {

	# we receive a reply, we need to check about application/sdp 
    # on our body, if we have, we answer that
	if(is_method("ACK") && has_body("application/sdp")){
		
		rtpproxy_answer("froc", "PUBLIC_IPV4");

	}else if(has_body("application/sdp")){
		# offering rtpproxy on a non ack message
		rtpproxy_offer("froc", "PUBLIC_IPV4");	
	}


	# here we try to identify if the user is behind a nat again
        # but now is the second user (the called user) 
	if(nat_uac_test(127)){
		fix_nated_contact();
	}
}


failure_route[missed_call] {
	
	if (t_was_cancelled()) {
		exit;
	}

}

